import warnings
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import (Message, InlineKeyboardMarkup,
                           InlineKeyboardButton, CallbackQuery,
                           KeyboardButton, ReplyKeyboardRemove)
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.utils.formatting import as_marked_list
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup

from src.interfaces.bot.services.load_resume import load_stack, load_about_me
from src.infrastructure.gpt.yandex_client import ask_yandex_gpt
from ..constants import COMMANDS_WITH_DESCRIPTION
from ..bot_logging import bot_logger

warnings.filterwarnings("ignore",
                        category=SyntaxWarning,
                        message="invalid escape sequence")
router = Router()


class ChatMode(StatesGroup):
    talking_to_ai = State()


@router.message(Command("start"))
async def start_command(message: Message):
    name = message.from_user.first_name
    bot_logger.info(f"User <{message.from_user.username}> used your /start")
    ai_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ò–ò –æ —Ä–µ–∑—é–ºe",
            callback_data="talk_to_ai")]
    ])
    await message.answer(
        f"*–ü—Ä–∏–≤–µ—Ç, {name}üëã*\n–Ø –±–æ—Ç –ö–∏—Ä–∏–ª–ª–∞ü§ñ\n"
        "–¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–µ–∑—é–º–µ –Ω–∞–∂–∞–≤"
        " –Ω–∞ *–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ò–ò –æ —Ä–µ–∑—é–º–µ* –Ω–∏–∂–µ\n\n"
        f"*–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:*\n{COMMANDS_WITH_DESCRIPTION}\n"
        f"‚ùó–í–∞—à –¥–∏–∞–ª–æ–≥ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω‚ùó",
        reply_markup=ai_button,
    )


@router.message(Command("about_kirill"))
async def start_command(message: Message):
    bot_logger.info(f"User <{message.from_user.username}> used your /about_kirill")
    await message.answer(load_about_me())


@router.message(Command("short_stack"))
async def short_stack_command(message: Message):
    bot_logger.info(f"User <{message.from_user.username}> used your /short_stack")
    stack = load_stack().split(sep="\n")

    content = as_marked_list(
        *stack,
        marker="‚û°Ô∏è ",
    )
    await message.answer(**content.as_kwargs())


@router.message(Command("help"))
async def help_command(message: Message):
    user_message = f"–í—Å–µ –∫–æ–º–∞–Ω–¥—ã:\n\n{COMMANDS_WITH_DESCRIPTION}"
    await message.answer(user_message)


@router.callback_query(F.data == "talk_to_ai")
async def talk_to_ai_handler(callback: CallbackQuery, state: FSMContext):
    stop_button = KeyboardButton(text="‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ò–ò")
    builder = ReplyKeyboardBuilder()
    builder.row(stop_button)
    stop_keyboard = builder.as_markup(
        resize_keyboard=True,
        input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å..."
    )
    await callback.message.answer(
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç üë®‚Äçüíº\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ö–∏—Ä–∏–ª–ª–æ–º, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ò–ò, "
        "—á—Ç–æ –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ –Ω–µ–ºüòä",
        reply_markup=stop_keyboard
    )
    await state.set_state(ChatMode.talking_to_ai)
    await callback.answer(text="–í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ò–ò")


@router.message(F.text == "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ò–ò")
async def stop_ai_chat(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ò–ò\\-—Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á—ë–Ω\\!\n\n"
        "–¢—ã –º–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É /start",
        reply_markup=ReplyKeyboardRemove(remove_keyboard=True)
    )


@router.message(
    ChatMode.talking_to_ai,
    flags={"chat_action": "typing", "rate_limit": 7})
async def handle_ai_question(message: Message):
    await message.chat.do("typing")
    reply = await ask_yandex_gpt(message.text)
    bot_logger.info(f"User <{message.from_user.username}> used AI feature")
    await message.reply(f"`{reply}`")


@router.message()
async def fallback_handler(message: Message, state: FSMContext):
    bot_logger.info(f"User <{message.from_user.username}> "
                    f"wrote unreachable message: {message.text} ")
    current_state = await state.get_state()
    if current_state == ChatMode.talking_to_ai:
        return

    await message.reply(
        "ü§ñ –Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ\\.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ò–ò, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É /start "
    )
